<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Amit Kumar-Hermosillo</title><link>http://amitkh.me/</link><description>Recent content on Amit Kumar-Hermosillo</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://amitkh.me/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://amitkh.me/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/about/</guid><description>Hi there! My name is Amit Kumar-Hermosillo. I am a computer engineering student at Olin College.
Most recently, I&amp;rsquo;ve worked as a software development engineer intern at Amazon, overhauling the full stack for the primary inventory compliance management tool used to search and suppress defective inventories, making the UI easier to use and more robust to inadvertent error and adding new action types that mitigate prior causes of or inventory leakage.</description></item><item><title>CAN Dashboard</title><link>http://amitkh.me/projects/can_dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/can_dashboard/</guid><description>I built a Qt-based CAN Dashboard for Olin&amp;rsquo;s Formula SAE Team with a heavy focus on usability, maintainability, and expandability.
The dashboard displaying the data from the first day we spun our car&amp;rsquo;s wheels!
Features The dashboard allows engineers to quickly and easily get live CAN information to debug our vehicle systems. It is extremely flexible, and can be used at any level, from just monitoring the messages from a single board to those from a particular enclosure or module to the entire car all at once.</description></item><item><title>Connect 4 Solver</title><link>http://amitkh.me/projects/4circle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/4circle/</guid><description>4Circle For the final of my Principles of Integrated Engineering class, I worked on a team of 4 to build a physical Connect 4 player that a human can play against on an actual board. I worked on the algorithm for our project, which took the current board position, and looked up to 25 moves deep into the game to find the next move.
Language We chose to write our algorithm in Go, for its combination of being a very fast language as well as its relative familiarity to our team members.</description></item><item><title>Inventory Actions Console</title><link>http://amitkh.me/projects/iac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/iac/</guid><description>During my summer internship at Amazon, my primary project was to add significant functionality to the Inventory Actions Console, or IAC, a web application that serves as an inventory compliance management tool, allowing users to search and suppress defective inventory items.
The tool was originally created to replace a legacy system that served a similar purpose, but had a few issues. For one, the codebase and tech stack were very outdated, and for another, the tool only supported taking action at the lowest granularity with minimal persistence, which opened the door for defective inventory leakages.</description></item><item><title>NBA Predction ML Model</title><link>http://amitkh.me/projects/nba_ml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/nba_ml/</guid><description>I built a machine learning model trained on historical data that uses teams&amp;rsquo; performances over their last 10 games to predict their match results with 72% accuracy.
The Data To train my model, I scraped every single NBA match over the last 10 years (data from basketball-reference.com), along with every team&amp;rsquo;s monthly set of advanced statistics for that same time period (data from nba.com). The data was scraped using BeautifulSoup, Selenium, and Pandas.</description></item><item><title>PySmash</title><link>http://amitkh.me/projects/pysmash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/pysmash/</guid><description>As a final project in my Software Design class, our team created a Super Smash Bros clone in Python that was playable over online multiplayer.
The Game Super Smash Bros is a crossover fighting game series originally developed by Nintendo. However, instead of depleting an opponent&amp;rsquo;s health bar, the goal is to increase their damage and eventually knock them off of the stage with a powerful attack.
Under the Hood The actual gameplay portion was built using PyGame.</description></item><item><title>STEP</title><link>http://amitkh.me/projects/step/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/step/</guid><description>What is STEP? STEP, which stands for Social Technology and Entrepreneurship with Purpose, is an experimental, impact-centered education class at Olin College of Engineering, centered around developing navigation technology for blind and visually impaired (BVI) users.
What is the problem? More specifically, we are developing AR systems for high-precision navigation. Imagine you get dropped off from a Lyft in downtown Manhattan as a blind individual - how would you navigate the the door of your destination?</description></item><item><title>Throttle Circuit Board</title><link>http://amitkh.me/projects/throttle_pcb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/throttle_pcb/</guid><description>One of my first-year projects on Olin&amp;rsquo;s Formula SAE Team was designing the throttle circuit board for our secondary research Go-kart. The throttle circuitry is responsible for reading the amount the throttle pedal is pushed, and the onboard microcontroller does some safety checks and translates that into a torque request from the motor controller to make the car go!
Where to start? This was my first electrical engineering project, and while I had a bit of background by this point on what the board needed to do, it was tough to translate that conceptual understanding into a set of components that could accomplish that task.</description></item><item><title>Wordle Solver</title><link>http://amitkh.me/projects/wordle_solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://amitkh.me/projects/wordle_solver/</guid><description>I built a Wordle solver using Python and information theory inspired by 3Blue1Brown that solved a word in an average of 4.12 guesses.
Wordle is a popular word game that rose in popularity in early 2022. As a fun project and inspired by the video linked above, I decided to try my own hand at creating a solver using some of those techniques and implement it as a CLI.
How it Works For each guess, the solver will run through all of the available 5 letter guesses, and using a combination of the guess&amp;rsquo; expected information given (the average amount the resultant pattern from this guess will reduce our search space, weighted by the likelihood of each possible pattern ocurring) and word frequency data that tells us how likely a particular word is to be common enough to be a Wordle answer, select whatever guess gives the lowest expected number of guesses.</description></item></channel></rss>